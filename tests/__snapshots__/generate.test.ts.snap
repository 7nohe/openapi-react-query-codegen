// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generate > common.ts 1`] = `
"// generated with @7nohe/openapi-react-query-codegen@1.0.0

import type { Options } from "@hey-api/client-fetch";
import type { UseQueryResult } from "@tanstack/react-query";
import type {
  addPet,
  deletePet,
  findPaginatedPets,
  findPetById,
  findPets,
  getNotDefined,
  postNotDefined,
} from "../requests/services.gen";
export type FindPetsDefaultResponse = Awaited<
  ReturnType<typeof findPets>
>["data"];
export type FindPetsQueryResult<
  TData = FindPetsDefaultResponse,
  TError = unknown,
> = UseQueryResult<TData, TError>;
export const useFindPetsKey = "FindPets";
export const UseFindPetsKeyFn = (
  clientOptions: Options<unknown, true> = {},
  queryKey?: Array<unknown>,
) => [useFindPetsKey, ...(queryKey ?? [clientOptions])];
export type GetNotDefinedDefaultResponse = Awaited<
  ReturnType<typeof getNotDefined>
>["data"];
export type GetNotDefinedQueryResult<
  TData = GetNotDefinedDefaultResponse,
  TError = unknown,
> = UseQueryResult<TData, TError>;
export const useGetNotDefinedKey = "GetNotDefined";
export const UseGetNotDefinedKeyFn = (
  clientOptions: Options<unknown, true> = {},
  queryKey?: Array<unknown>,
) => [useGetNotDefinedKey, ...(queryKey ?? [clientOptions])];
export type FindPetByIdDefaultResponse = Awaited<
  ReturnType<typeof findPetById>
>["data"];
export type FindPetByIdQueryResult<
  TData = FindPetByIdDefaultResponse,
  TError = unknown,
> = UseQueryResult<TData, TError>;
export const useFindPetByIdKey = "FindPetById";
export const UseFindPetByIdKeyFn = (
  clientOptions: Options<unknown, true>,
  queryKey?: Array<unknown>,
) => [useFindPetByIdKey, ...(queryKey ?? [clientOptions])];
export type FindPaginatedPetsDefaultResponse = Awaited<
  ReturnType<typeof findPaginatedPets>
>["data"];
export type FindPaginatedPetsQueryResult<
  TData = FindPaginatedPetsDefaultResponse,
  TError = unknown,
> = UseQueryResult<TData, TError>;
export const useFindPaginatedPetsKey = "FindPaginatedPets";
export const UseFindPaginatedPetsKeyFn = (
  clientOptions: Options<unknown, true> = {},
  queryKey?: Array<unknown>,
) => [useFindPaginatedPetsKey, ...(queryKey ?? [clientOptions])];
export type AddPetMutationResult = Awaited<ReturnType<typeof addPet>>;
export type PostNotDefinedMutationResult = Awaited<
  ReturnType<typeof postNotDefined>
>;
export type DeletePetMutationResult = Awaited<ReturnType<typeof deletePet>>;
"
`;

exports[`generate > ensureQueryData.ts 1`] = `
"// generated with @7nohe/openapi-react-query-codegen@1.0.0

import type { Options } from "@hey-api/client-fetch";
import type { QueryClient } from "@tanstack/react-query";
import {
  findPaginatedPets,
  findPetById,
  findPets,
  getNotDefined,
} from "../requests/services.gen";
import type {
  FindPaginatedPetsData,
  FindPetByIdData,
  FindPetsData,
} from "../requests/types.gen";
import * as Common from "./common";
export const ensureUseFindPetsData = (
  queryClient: QueryClient,
  clientOptions: Options<FindPetsData, true> = {},
) =>
  queryClient.ensureQueryData({
    queryKey: Common.UseFindPetsKeyFn(clientOptions),
    queryFn: () =>
      findPets({ ...clientOptions }).then((response) => response.data),
  });
export const ensureUseGetNotDefinedData = (
  queryClient: QueryClient,
  clientOptions: Options<unknown, true> = {},
) =>
  queryClient.ensureQueryData({
    queryKey: Common.UseGetNotDefinedKeyFn(clientOptions),
    queryFn: () =>
      getNotDefined({ ...clientOptions }).then((response) => response.data),
  });
export const ensureUseFindPetByIdData = (
  queryClient: QueryClient,
  clientOptions: Options<FindPetByIdData, true>,
) =>
  queryClient.ensureQueryData({
    queryKey: Common.UseFindPetByIdKeyFn(clientOptions),
    queryFn: () =>
      findPetById({ ...clientOptions }).then((response) => response.data),
  });
export const ensureUseFindPaginatedPetsData = (
  queryClient: QueryClient,
  clientOptions: Options<FindPaginatedPetsData, true> = {},
) =>
  queryClient.ensureQueryData({
    queryKey: Common.UseFindPaginatedPetsKeyFn(clientOptions),
    queryFn: () =>
      findPaginatedPets({ ...clientOptions }).then((response) => response.data),
  });
"
`;

exports[`generate > index.ts 1`] = `
"// generated with @7nohe/openapi-react-query-codegen@1.0.0

export * from "./common";
export * from "./queries";
"
`;

exports[`generate > infiniteQueries.ts 1`] = `
"// generated with @7nohe/openapi-react-query-codegen@1.0.0

import type { Options } from "@hey-api/client-fetch";
import { findPaginatedPets } from "../requests/services.gen";
import type {
  FindPaginatedPetsData,
  FindPaginatedPetsError,
} from "../requests/types.gen";
import * as Common from "./common";
export const useFindPaginatedPetsInfinite = <
  TData = InfiniteData<Common.FindPaginatedPetsDefaultResponse>,
  TError = FindPaginatedPetsError,
  TQueryKey extends Array<unknown> = unknown[],
>(
  clientOptions: Options<FindPaginatedPetsData, true> = {},
  queryKey?: TQueryKey,
  options?: Omit<
    UseInfiniteQueryOptions<TData, TError>,
    "queryKey" | "queryFn"
  >,
) =>
  useInfiniteQuery({
    queryKey: Common.UseFindPaginatedPetsKeyFn(clientOptions, queryKey),
    queryFn: ({ pageParam }) =>
      findPaginatedPets({
        ...clientOptions,
        query: { ...clientOptions.query, page: pageParam as number },
      }).then((response) => response.data as TData) as TData,
    initialPageParam: "initial",
    getNextPageParam: (response) =>
      (
        response as {
          meta: {
            next: number;
          };
        }
      ).meta.next,
    ...options,
  });
"
`;

exports[`generate > prefetch.ts 1`] = `
"// generated with @7nohe/openapi-react-query-codegen@1.0.0

import type { Options } from "@hey-api/client-fetch";
import type { QueryClient } from "@tanstack/react-query";
import {
  findPaginatedPets,
  findPetById,
  findPets,
  getNotDefined,
} from "../requests/services.gen";
import type {
  FindPaginatedPetsData,
  FindPetByIdData,
  FindPetsData,
} from "../requests/types.gen";
import * as Common from "./common";
export const prefetchUseFindPets = (
  queryClient: QueryClient,
  clientOptions: Options<FindPetsData, true> = {},
) =>
  queryClient.prefetchQuery({
    queryKey: Common.UseFindPetsKeyFn(clientOptions),
    queryFn: () =>
      findPets({ ...clientOptions }).then((response) => response.data),
  });
export const prefetchUseGetNotDefined = (
  queryClient: QueryClient,
  clientOptions: Options<unknown, true> = {},
) =>
  queryClient.prefetchQuery({
    queryKey: Common.UseGetNotDefinedKeyFn(clientOptions),
    queryFn: () =>
      getNotDefined({ ...clientOptions }).then((response) => response.data),
  });
export const prefetchUseFindPetById = (
  queryClient: QueryClient,
  clientOptions: Options<FindPetByIdData, true>,
) =>
  queryClient.prefetchQuery({
    queryKey: Common.UseFindPetByIdKeyFn(clientOptions),
    queryFn: () =>
      findPetById({ ...clientOptions }).then((response) => response.data),
  });
export const prefetchUseFindPaginatedPets = (
  queryClient: QueryClient,
  clientOptions: Options<FindPaginatedPetsData, true> = {},
) =>
  queryClient.prefetchQuery({
    queryKey: Common.UseFindPaginatedPetsKeyFn(clientOptions),
    queryFn: () =>
      findPaginatedPets({ ...clientOptions }).then((response) => response.data),
  });
"
`;

exports[`generate > queries.ts 1`] = `
"// generated with @7nohe/openapi-react-query-codegen@1.0.0

import type { Options } from "@hey-api/client-fetch";
import {
  useMutation,
  type UseMutationOptions,
  useQuery,
  type UseQueryOptions,
} from "@tanstack/react-query";
import {
  addPet,
  deletePet,
  findPaginatedPets,
  findPetById,
  findPets,
  getNotDefined,
  postNotDefined,
} from "../requests/services.gen";
import type {
  AddPetData,
  AddPetError,
  DeletePetData,
  DeletePetError,
  FindPaginatedPetsData,
  FindPaginatedPetsError,
  FindPetByIdData,
  FindPetByIdError,
  FindPetsData,
  FindPetsError,
  GetNotDefinedError,
  PostNotDefinedError,
} from "../requests/types.gen";
import * as Common from "./common";
export const useFindPets = <
  TData = Common.FindPetsDefaultResponse,
  TError = FindPetsError,
  TQueryKey extends Array<unknown> = unknown[],
>(
  clientOptions: Options<FindPetsData, true> = {},
  queryKey?: TQueryKey,
  options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">,
) =>
  useQuery<TData, TError>({
    queryKey: Common.UseFindPetsKeyFn(clientOptions, queryKey),
    queryFn: () =>
      findPets({ ...clientOptions }).then(
        (response) => response.data as TData,
      ) as TData,
    ...options,
  });
export const useGetNotDefined = <
  TData = Common.GetNotDefinedDefaultResponse,
  TError = GetNotDefinedError,
  TQueryKey extends Array<unknown> = unknown[],
>(
  clientOptions: Options<unknown, true> = {},
  queryKey?: TQueryKey,
  options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">,
) =>
  useQuery<TData, TError>({
    queryKey: Common.UseGetNotDefinedKeyFn(clientOptions, queryKey),
    queryFn: () =>
      getNotDefined({ ...clientOptions }).then(
        (response) => response.data as TData,
      ) as TData,
    ...options,
  });
export const useFindPetById = <
  TData = Common.FindPetByIdDefaultResponse,
  TError = FindPetByIdError,
  TQueryKey extends Array<unknown> = unknown[],
>(
  clientOptions: Options<FindPetByIdData, true>,
  queryKey?: TQueryKey,
  options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">,
) =>
  useQuery<TData, TError>({
    queryKey: Common.UseFindPetByIdKeyFn(clientOptions, queryKey),
    queryFn: () =>
      findPetById({ ...clientOptions }).then(
        (response) => response.data as TData,
      ) as TData,
    ...options,
  });
export const useFindPaginatedPets = <
  TData = Common.FindPaginatedPetsDefaultResponse,
  TError = FindPaginatedPetsError,
  TQueryKey extends Array<unknown> = unknown[],
>(
  clientOptions: Options<FindPaginatedPetsData, true> = {},
  queryKey?: TQueryKey,
  options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">,
) =>
  useQuery<TData, TError>({
    queryKey: Common.UseFindPaginatedPetsKeyFn(clientOptions, queryKey),
    queryFn: () =>
      findPaginatedPets({ ...clientOptions }).then(
        (response) => response.data as TData,
      ) as TData,
    ...options,
  });
export const useAddPet = <
  TData = Common.AddPetMutationResult,
  TError = AddPetError,
  TContext = unknown,
>(
  options?: Omit<
    UseMutationOptions<TData, TError, Options<AddPetData, true>, TContext>,
    "mutationFn"
  >,
) =>
  useMutation<TData, TError, Options<AddPetData, true>, TContext>({
    mutationFn: (clientOptions) =>
      addPet(clientOptions) as unknown as Promise<TData>,
    ...options,
  });
export const usePostNotDefined = <
  TData = Common.PostNotDefinedMutationResult,
  TError = PostNotDefinedError,
  TContext = unknown,
>(
  options?: Omit<
    UseMutationOptions<TData, TError, Options<unknown, true>, TContext>,
    "mutationFn"
  >,
) =>
  useMutation<TData, TError, Options<unknown, true>, TContext>({
    mutationFn: (clientOptions) =>
      postNotDefined(clientOptions) as unknown as Promise<TData>,
    ...options,
  });
export const useDeletePet = <
  TData = Common.DeletePetMutationResult,
  TError = DeletePetError,
  TContext = unknown,
>(
  options?: Omit<
    UseMutationOptions<TData, TError, Options<DeletePetData, true>, TContext>,
    "mutationFn"
  >,
) =>
  useMutation<TData, TError, Options<DeletePetData, true>, TContext>({
    mutationFn: (clientOptions) =>
      deletePet(clientOptions) as unknown as Promise<TData>,
    ...options,
  });
"
`;

exports[`generate > suspense.ts 1`] = `
"// generated with @7nohe/openapi-react-query-codegen@1.0.0

import type { Options } from "@hey-api/client-fetch";
import { type UseQueryOptions, useSuspenseQuery } from "@tanstack/react-query";
import {
  findPaginatedPets,
  findPetById,
  findPets,
  getNotDefined,
} from "../requests/services.gen";
import type {
  FindPaginatedPetsData,
  FindPaginatedPetsError,
  FindPetByIdData,
  FindPetByIdError,
  FindPetsData,
  FindPetsError,
  GetNotDefinedError,
} from "../requests/types.gen";
import * as Common from "./common";
export const useFindPetsSuspense = <
  TData = Common.FindPetsDefaultResponse,
  TError = FindPetsError,
  TQueryKey extends Array<unknown> = unknown[],
>(
  clientOptions: Options<FindPetsData, true> = {},
  queryKey?: TQueryKey,
  options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">,
) =>
  useSuspenseQuery<TData, TError>({
    queryKey: Common.UseFindPetsKeyFn(clientOptions, queryKey),
    queryFn: () =>
      findPets({ ...clientOptions }).then(
        (response) => response.data as TData,
      ) as TData,
    ...options,
  });
export const useGetNotDefinedSuspense = <
  TData = Common.GetNotDefinedDefaultResponse,
  TError = GetNotDefinedError,
  TQueryKey extends Array<unknown> = unknown[],
>(
  clientOptions: Options<unknown, true> = {},
  queryKey?: TQueryKey,
  options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">,
) =>
  useSuspenseQuery<TData, TError>({
    queryKey: Common.UseGetNotDefinedKeyFn(clientOptions, queryKey),
    queryFn: () =>
      getNotDefined({ ...clientOptions }).then(
        (response) => response.data as TData,
      ) as TData,
    ...options,
  });
export const useFindPetByIdSuspense = <
  TData = Common.FindPetByIdDefaultResponse,
  TError = FindPetByIdError,
  TQueryKey extends Array<unknown> = unknown[],
>(
  clientOptions: Options<FindPetByIdData, true>,
  queryKey?: TQueryKey,
  options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">,
) =>
  useSuspenseQuery<TData, TError>({
    queryKey: Common.UseFindPetByIdKeyFn(clientOptions, queryKey),
    queryFn: () =>
      findPetById({ ...clientOptions }).then(
        (response) => response.data as TData,
      ) as TData,
    ...options,
  });
export const useFindPaginatedPetsSuspense = <
  TData = Common.FindPaginatedPetsDefaultResponse,
  TError = FindPaginatedPetsError,
  TQueryKey extends Array<unknown> = unknown[],
>(
  clientOptions: Options<FindPaginatedPetsData, true> = {},
  queryKey?: TQueryKey,
  options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">,
) =>
  useSuspenseQuery<TData, TError>({
    queryKey: Common.UseFindPaginatedPetsKeyFn(clientOptions, queryKey),
    queryFn: () =>
      findPaginatedPets({ ...clientOptions }).then(
        (response) => response.data as TData,
      ) as TData,
    ...options,
  });
"
`;
