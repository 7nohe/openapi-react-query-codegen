// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generate > common.ts 1`] = `
"// generated with @7nohe/openapi-react-query-codegen@1.0.0 

import { UseQueryResult } from "@tanstack/react-query";
import { addPet, deletePet, findPetById, findPets, getNotDefined, postNotDefined } from "../requests/services.gen";
export type FindPetsDefaultResponse = Awaited<ReturnType<typeof findPets>>["data"];
export type FindPetsQueryResult<TData = FindPetsDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useFindPetsKey = "FindPets";
export const UseFindPetsKeyFn = ({ }: {} = {}, queryKey?: Array<unknown>) => [useFindPetsKey, ...(queryKey ?? [{}])];
export type GetNotDefinedDefaultResponse = Awaited<ReturnType<typeof getNotDefined>>["data"];
export type GetNotDefinedQueryResult<TData = GetNotDefinedDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useGetNotDefinedKey = "GetNotDefined";
export const UseGetNotDefinedKeyFn = ({ }: {} = {}, queryKey?: Array<unknown>) => [useGetNotDefinedKey, ...(queryKey ?? [{}])];
export type FindPetByIdDefaultResponse = Awaited<ReturnType<typeof findPetById>>["data"];
export type FindPetByIdQueryResult<TData = FindPetByIdDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useFindPetByIdKey = "FindPetById";
export const UseFindPetByIdKeyFn = ({ }: {} = {}, queryKey?: Array<unknown>) => [useFindPetByIdKey, ...(queryKey ?? [{}])];
export type AddPetMutationResult = Awaited<ReturnType<typeof addPet>>;
export type PostNotDefinedMutationResult = Awaited<ReturnType<typeof postNotDefined>>;
export type DeletePetMutationResult = Awaited<ReturnType<typeof deletePet>>;
"
`;

exports[`generate > index.ts 1`] = `
"// generated with @7nohe/openapi-react-query-codegen@1.0.0 

export * from "./common";
export * from "./queries";
"
`;

exports[`generate > prefetch.ts 1`] = `
"// generated with @7nohe/openapi-react-query-codegen@1.0.0 

import { type QueryClient } from "@tanstack/react-query";
import { findPetById, findPets, getNotDefined } from "../requests/services.gen";
import * as Common from "./common";
export const prefetchUseFindPets = (queryClient: QueryClient, { }: {} = {}) => queryClient.prefetchQuery({ queryKey: Common.UseFindPetsKeyFn({}), queryFn: () => findPets({}) });
export const prefetchUseGetNotDefined = (queryClient: QueryClient, { }: {} = {}) => queryClient.prefetchQuery({ queryKey: Common.UseGetNotDefinedKeyFn({}), queryFn: () => getNotDefined({}) });
export const prefetchUseFindPetById = (queryClient: QueryClient, { }: {} = {}) => queryClient.prefetchQuery({ queryKey: Common.UseFindPetByIdKeyFn({}), queryFn: () => findPetById({}) });
"
`;

exports[`generate > queries.ts 1`] = `
"// generated with @7nohe/openapi-react-query-codegen@1.0.0 

import { UseMutationOptions, UseQueryOptions, useMutation, useQuery } from "@tanstack/react-query";
import { addPet, deletePet, findPetById, findPets, getNotDefined, postNotDefined } from "../requests/services.gen";
import * as Common from "./common";
export const useFindPets = <TData = Common.FindPetsDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ }: {} = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseFindPetsKeyFn({}, queryKey), queryFn: () => findPets({}).then(response => response.data as TData) as TData, ...options });
export const useGetNotDefined = <TData = Common.GetNotDefinedDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ }: {} = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseGetNotDefinedKeyFn({}, queryKey), queryFn: () => getNotDefined({}).then(response => response.data as TData) as TData, ...options });
export const useFindPetById = <TData = Common.FindPetByIdDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ }: {} = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseFindPetByIdKeyFn({}, queryKey), queryFn: () => findPetById({}).then(response => response.data as TData) as TData, ...options });
export const useAddPet = <TData = Common.AddPetMutationResult, TError = unknown, TContext = unknown>(options?: Omit<UseMutationOptions<TData, TError, {}, TContext>, "mutationFn">) => useMutation<TData, TError, {}, TContext>({ mutationFn: ({ }) => addPet({}) as unknown as Promise<TData>, ...options });
export const usePostNotDefined = <TData = Common.PostNotDefinedMutationResult, TError = unknown, TContext = unknown>(options?: Omit<UseMutationOptions<TData, TError, {}, TContext>, "mutationFn">) => useMutation<TData, TError, {}, TContext>({ mutationFn: ({ }) => postNotDefined({}) as unknown as Promise<TData>, ...options });
export const useDeletePet = <TData = Common.DeletePetMutationResult, TError = unknown, TContext = unknown>(options?: Omit<UseMutationOptions<TData, TError, {}, TContext>, "mutationFn">) => useMutation<TData, TError, {}, TContext>({ mutationFn: ({ }) => deletePet({}) as unknown as Promise<TData>, ...options });
"
`;

exports[`generate > suspense.ts 1`] = `
"// generated with @7nohe/openapi-react-query-codegen@1.0.0 

import { UseQueryOptions, useSuspenseQuery } from "@tanstack/react-query";
import { findPetById, findPets, getNotDefined } from "../requests/services.gen";
import * as Common from "./common";
export const useFindPetsSuspense = <TData = Common.FindPetsDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ }: {} = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseFindPetsKeyFn({}, queryKey), queryFn: () => findPets({}).then(response => response.data as TData) as TData, ...options });
export const useGetNotDefinedSuspense = <TData = Common.GetNotDefinedDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ }: {} = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseGetNotDefinedKeyFn({}, queryKey), queryFn: () => getNotDefined({}).then(response => response.data as TData) as TData, ...options });
export const useFindPetByIdSuspense = <TData = Common.FindPetByIdDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ }: {} = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseFindPetByIdKeyFn({}, queryKey), queryFn: () => findPetById({}).then(response => response.data as TData) as TData, ...options });
"
`;
